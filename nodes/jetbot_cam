#!/usr/bin/env python

import traitlets
from traitlets.config.configurable import SingletonConfigurable
import atexit
import cv2
import threading
import numpy as np

import rospy
from sensor_msgs.msg import Image
from sensor_msgs.msg import CompressedImage

import cv_bridge

class Camera(SingletonConfigurable):
    value = traitlets.Any()
    
    # config
    width = traitlets.Integer(default_value=640).tag(config=True)
    height = traitlets.Integer(default_value=480).tag(config=True)
    #fps = traitlets.Integer(default_value=21).tag(config=True)
    fps = traitlets.Integer(default_value=15).tag(config=True)
    capture_width = traitlets.Integer(default_value=3280).tag(config=True)
    capture_height = traitlets.Integer(default_value=2464).tag(config=True)
    publish_compressed = traitlets.Bool(default_value=True).tag(config=True)

    def __init__(self, *args, **kwargs):
        self.value = np.empty((self.height, self.width, 3), dtype=np.uint8)
        super(Camera, self).__init__(*args, **kwargs)

        atexit.register(self.stop)
        rospy.init_node('jetbot_cam')
        self.pub_img = rospy.Publisher('/jetbot_cam/image_raw', Image, queue_size=10)
        self.pub_cimg = rospy.Publisher('/jetbot_cam/image_raw/compressed', CompressedImage, queue_size=10)
        self.bridge = cv_bridge.CvBridge()

        try:
            self.cap = cv2.VideoCapture(self._gst_str(), cv2.CAP_GSTREAMER)

            re, image = self.cap.read()

            if not re:
                raise RuntimeError('Could not read image from camera.')

            self.start()
        except Exception as ex:
            self.stop()
            print(ex)
            raise RuntimeError(
                'Could not initialize camera.  Please see error trace.')


    def capture_frame(self):
        re, image = self.cap.read()
        if re:
            return image
        else:
            return None
                
    def _gst_str(self):
        return 'nvarguscamerasrc ! video/x-raw(memory:NVMM), width=%d, height=%d, format=(string)NV12, framerate=(fraction)%d/1 ! nvvidconv ! video/x-raw, width=(int)%d, height=(int)%d, format=(string)BGRx ! videoconvert ! appsink' % (
                self.capture_width, self.capture_height, self.fps, self.width, self.height)
    
    def start(self):
        if not self.cap.isOpened():
            self.cap.open(self._gst_str(), cv2.CAP_GSTREAMER)

        while not rospy.is_shutdown():
            img = self.capture_frame()
            msg = self.bridge.cv2_to_imgmsg(img, encoding='bgr8')
            msg.header.stamp = rospy.Time.now()
            msg.header.frame_id = '/camera'
            self.pub_img.publish(msg)

            if self.publish_compressed:
                #cmsg = CompressedImage()
                #cmsg.header = msg.header
                ##cmsg.format = 'jpeg'
                ##ret, buf = cv2.imencode('.jpg', img)
                #cmsg.format = 'png'
                #ret, buf = cv2.imencode('.png', img)
                #cmsg.data = bytes(buf)
                cmsg = self.bridge.cv2_to_compressed_imgmsg(img)
                cmsg.header.stamp = rospy.Time.now()
                cmsg.header.frame_id = '/camera'
                self.pub_cimg.publish(cmsg)


        self.stop()

    def stop(self):
        if hasattr(self, 'cap'):
            self.cap.release()
            
    def restart(self):
        self.stop()
        self.start()


if __name__ == '__main__':
    node = Camera.instance()
