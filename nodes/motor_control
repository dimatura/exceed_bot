#!/usr/bin/env python

import time
import sys
import os
from collections import OrderedDict

import rospy

from geometry_msgs.msg import Twist
from std_msgs.msg import Empty
from std_msgs.msg import Float64

from exceed_bot.motor_controller import MotorController


MAX_TICKS_PER_S = 200.0
MIN_TICKS_PER_S = -200.0


class Node:
    def __init__(self):
        rospy.init_node('motor_control_node')
        # self.controller = MotorController('/dev/ttyACM0')
        self.controller = MotorController('/dev/teensy')

        self.sub_vel = rospy.Subscriber('/cmd_vel', Twist, self.cmd_vel_cb)
        self.pub_steer_deg = rospy.Publisher('/steer_deg', Float64, queue_size=10)
        self.pub_target_ticks_per_s = rospy.Publisher('/target_ticks_per_s', Float64, queue_size=10)
        self.pub_ticks_per_s = rospy.Publisher('/ticks_per_s', Float64, queue_size=10)
        self.pub_motor_us = rospy.Publisher('/motor_us', Float64, queue_size=10)
        rospy.on_shutdown(self.shutdown)

    def cmd_vel_cb(self, msg):
        throttle = msg.linear.x
        steer = msg.angular.z

        steer_deg = self.servo_map(steer)
        target_ticks_per_s = self.motor_map(throttle)

        self.pub_steer_deg.publish(Float64(float(steer_deg)))
        self.pub_target_ticks_per_s.publish(Float64(float(target_ticks_per_s)))

        info_msg_dict = OrderedDict()
        info_msg_dict["steer deg"] = steer_deg
        info_msg_dict["target_ticks_per_s"] = target_ticks_per_s

        reply = self.controller.motor_cmd(target_ticks_per_s, steer_deg)
        if reply is None:
            rospy.loginfo(", ".join(["%s: %r" % (k, v) for (k, v) in info_msg_dict.items()]))
            rospy.logerr("motor_control: Error contacting motor controller (no reply)")
            return
        ticks_per_s = reply['ticks_per_s']
        motor_us = reply['motor_input_us']

        info_msg_dict["ticks_per_s"] = ticks_per_s
        info_msg_dict["motor_input_us"] = motor_us
        rospy.loginfo(", ".join(["%s: %r" % (k, v) for (k, v) in info_msg_dict.items()]))

        self.pub_ticks_per_s.publish(Float64(float(ticks_per_s)))
        self.pub_motor_us.publish(Float64(float(motor_us)))

    def servo_map(self, val):
        # -1, 1 to 0, 180
        val2 = val * 90.0 + 90.0
        # val3 = min(max(val2, SERVO_MIN), SERVO_MAX)
        return val2

    def motor_map(self, val):
        # -1, 1 to min_ticks_per_s, max_ticks_per_s
        val2 = (val + 1.0)/2.
        val3 = MIN_TICKS_PER_S*(1.0-val2) + val2*MAX_TICKS_PER_S
        val4 = min(max(val3, MIN_TICKS_PER_S), MAX_TICKS_PER_S)
        return int(val4)

    def shutdown(self):
        rospy.loginfo('shutdown')
        self.controller.close()

    def run(self):
        rate = rospy.Rate(0.1)
        while not rospy.is_shutdown():
            rospy.loginfo('hearbeat')
            rate.sleep()

if __name__ == '__main__':
    node = Node()
    node.run()
