#!/usr/bin/env python

"""
tuned for exceed platform
"""

import time
import sys
import os

import rospy

from geometry_msgs.msg import Twist
from std_msgs.msg import Empty

import exceed_bot.maestro

MOTOR = 0
SERVO = 5

# won't move until ~1580
# note -- typical minmax values in RC are 988-2012, with 1500 being center
# subs range seems to be 172-1811
# TODO figure out weird reversal/break thing
MOTOR_CENTER = 1450
MOTOR_MIN = MOTOR_CENTER - 200
MOTOR_MAX = MOTOR_CENTER + 200

# center between 1330-1500
SERVO_CENTER = 1409
# hard right 990-1113
SERVO_MIN = 1000
# hard left 1660-1880
SERVO_MAX = 1780


class Node(object):
    def __init__(self):
        rospy.init_node('motor_control_node')
        self.sub_vel = rospy.Subscriber('/cmd_vel', Twist, self.cmd_vel_cb)
        self.maestro = exceed_bot.maestro.Controller()
        rospy.on_shutdown(self.shutdown)

    def cmd_vel_cb(self, msg):
        throttle = msg.linear.x
        steer = msg.angular.z
        #throttle = -joy.get_axis(1)
        #steer = -joy.get_axis(3)

        steer_pulse = self.servo_map(steer)
        throttle_pulse = self.motor_map(throttle)

        rospy.loginfo('throttle %f %f', throttle, throttle_pulse)
        rospy.loginfo('steer %f %f', steer, steer_pulse)
        self.maestro.setTarget(SERVO, steer_pulse*4)
        self.maestro.setTarget(MOTOR, throttle_pulse*4)

    def servo_map(self, val):
        # -1, 1 to 0, 1
        val2 = (val + 1.0)/2.
        val3 = SERVO_MIN*(1.-val2) + val2*SERVO_MAX
        val4 = min(max(val3, SERVO_MIN), SERVO_MAX)
        return int(val4)

    def motor_map(self, val):
        # -1, 1 to 0, 1
        val2 = (val + 1.0)/2.
        val3 = MOTOR_MIN*(1.-val2) + val2*MOTOR_MAX
        print val3
        val4 = min(max(val3, MOTOR_MIN), MOTOR_MAX)
        return int(val4)

    def shutdown(self):
        rospy.loginfo('shutdown')
        self.maestro.stopAll()
        self.maestro.close()

    def run(self):
        rate = rospy.Rate(0.1)
        while not rospy.is_shutdown():
            rospy.loginfo('hearbeat')
            rate.sleep()


if __name__ == '__main__':
    node = Node()
    node.run()
