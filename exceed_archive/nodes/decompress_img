#!/usr/bin/env python

import time
import sys
import os

import cv2
import numpy as np
import traitlets as tr

import rospy

import cv_bridge
from sensor_msgs.msg import Image
from sensor_msgs.msg import CompressedImage


class Node(object):
    def __init__(self):
        rospy.init_node('decompress_img_node')
        # compressed image will output to bgr8
        self.img_cb = rospy.Subscriber('/camera/color/image_raw/compressed', CompressedImage, self.img_cb)
        self.img_pub = rospy.Publisher('/camera/color/image_raw', Image, queue_size=10)
        self.bridge = cv_bridge.CvBridge()


    def img_cb(self, msg):
        buf = np.frombuffer(msg.data, dtype=np.uint8)
        img_np = cv2.imdecode(buf, -1)  # LOAD_IMAGE_UNCHANGED
        img_np = img_np[:, :, ::-1] 
        #img_msg = self.bridge.cv2_to_imgmsg(img_np, encoding='bgr8')
        img_msg = self.bridge.cv2_to_imgmsg(img_np, encoding='rgb8')
        #cimg_msg = self.bridge.compressed_imgmsg_to_cv2(img_np, encoding='rgb8')
        img_msg.header.stamp = msg.header.stamp
        img_msg.header.frame_id = msg.header.frame_id
        self.img_pub.publish(img_msg)


    def run(self):
        rate = rospy.Rate(0.1)
        while not rospy.is_shutdown():
            rospy.loginfo('hearbeat')
            rate.sleep()


if __name__ == '__main__':
    node = Node()
    node.run()
